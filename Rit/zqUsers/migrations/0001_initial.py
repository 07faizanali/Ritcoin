# Generated by Django 4.2.10 on 2024-05-19 06:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InvestmentWallet',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('txn_date', models.DateTimeField()),
                ('txn_type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'wallet_investmentwallet',
                'ordering': ['-txn_date'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TradingTransaction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.FloatField(default=None, null=True)),
                ('type', models.CharField(max_length=50)),
                ('trans_rate_usd', models.FloatField()),
                ('tran_date', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('worth_zaan', models.FloatField()),
                ('expire_date', models.DateTimeField(null=True)),
                ('is_scratched', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'rewards',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WalletTab',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('col2', models.CharField(max_length=255)),
                ('col3', models.CharField(max_length=255)),
                ('col4', models.CharField(max_length=255, null=True)),
                ('col5', models.CharField(max_length=255, null=True)),
                ('col6', models.TextField(max_length=255, null=True)),
                ('col7', models.CharField(max_length=255, null=True)),
                ('amount', models.FloatField()),
                ('txn_date', models.DateTimeField()),
                ('txn_type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'wallet_wallettab',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZqUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(db_column='Id', primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('memberid', models.CharField(max_length=20, unique=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('mobile', models.TextField(blank=True, null=True)),
                ('joindate', models.DateTimeField(auto_now_add=True)),
                ('status', models.BooleanField(default=False)),
                ('userType', models.CharField(default='member', max_length=50)),
                ('rank', models.IntegerField(default=0)),
                ('activationdate', models.DateTimeField(null=True)),
                ('profile_pic', models.TextField(blank=True, db_column='Profile_pic', null=True)),
                ('pin_amount', models.FloatField(db_column='Pin_Amount', default=0)),
                ('intro_email', models.TextField()),
                ('is_verfied', models.BooleanField(default=False)),
                ('is_mining_activated', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('introducerid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='introduced_users', to=settings.AUTH_USER_MODEL, to_field='memberid')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'zqUsers_zquser',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Income2',
            fields=[
                ('srno', models.AutoField(primary_key=True, serialize=False)),
                ('intronewid', models.CharField(max_length=255)),
                ('rs_usd', models.FloatField(default=0)),
                ('package_usd', models.FloatField(default=0)),
                ('point', models.IntegerField()),
                ('package', models.FloatField()),
                ('members', models.CharField(max_length=255)),
                ('position', models.IntegerField()),
                ('last_paid_date', models.DateField()),
            ],
            options={
                'db_table': 'Income2',
            },
        ),
        migrations.CreateModel(
            name='WalletAMICoinForUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('amicoin', models.FloatField()),
                ('amicoinin_doller', models.FloatField()),
                ('paystatus', models.CharField(max_length=100)),
                ('remark', models.CharField(max_length=255)),
                ('receivedate', models.DateTimeField()),
                ('approve_date', models.DateTimeField()),
                ('trxndate', models.DateTimeField()),
                ('trxnid', models.CharField(max_length=255)),
                ('status', models.IntegerField()),
                ('withrawal_add', models.CharField(max_length=255)),
                ('admin_charge', models.FloatField(default=0)),
                ('requested_amount', models.FloatField(default=0)),
                ('total_value', models.FloatField(default=0)),
                ('total_value_zaan', models.FloatField(null=True)),
                ('withdrawl_time_zaan_rate', models.FloatField(blank=True)),
                ('withdrawal_bank_name', models.CharField(blank=True, max_length=255, null=True)),
                ('memberid', models.ForeignKey(db_column='memberid', on_delete=django.db.models.deletion.CASCADE, related_name='walletAMICoinMember_zquser', to=settings.AUTH_USER_MODEL, to_field='memberid')),
            ],
            options={
                'db_table': 'walletAMICoin_for_user',
            },
        ),
        migrations.CreateModel(
            name='ROIDailyCustomer',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('remark', models.CharField(max_length=100, null=True)),
                ('total_sbg', models.FloatField(null=True)),
                ('roi_sbg_usd', models.FloatField(default=0)),
                ('roi_days', models.IntegerField(null=True)),
                ('roi_date', models.DateField(null=True)),
                ('investment_id', models.ForeignKey(db_column='investment_id', on_delete=django.db.models.deletion.CASCADE, related_name='investment_id_invs', to='zqUsers.investmentwallet')),
                ('userid', models.ForeignKey(db_column='userid', on_delete=django.db.models.deletion.CASCADE, related_name='roiDailyMember_zquser', to=settings.AUTH_USER_MODEL, to_field='memberid')),
            ],
            options={
                'db_table': 'roi_daily_customer',
            },
        ),
        migrations.CreateModel(
            name='Income1',
            fields=[
                ('srno', models.AutoField(primary_key=True, serialize=False)),
                ('rs', models.FloatField()),
                ('package_usd', models.FloatField(default=0)),
                ('point', models.IntegerField()),
                ('package', models.FloatField()),
                ('last_paid_date', models.DateField()),
                ('intronewid', models.ForeignKey(db_column='intronewid', on_delete=django.db.models.deletion.CASCADE, related_name='income1_intros', to=settings.AUTH_USER_MODEL, to_field='memberid')),
                ('members', models.ForeignKey(db_column='members', on_delete=django.db.models.deletion.CASCADE, related_name='income1_members', to=settings.AUTH_USER_MODEL, to_field='memberid')),
            ],
            options={
                'db_table': 'Income1',
            },
        ),
    ]
