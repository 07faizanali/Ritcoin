{% extends 'zqUsers/member/layout/main.html' %}

{% load static %}
{% load customFilters %}


{% block 'content' %}
<div class="container-fluid"style="">
    <div class="row" >

        <div class="col-xl-12 col-lg-12">
            <div class="row" >
                <div class="col-xl-12">
                    <div class="card p-5">
               

                        <div class="row ">
                            <div class="col-md-2 mt-4"> 
                                <h3 style="color:white;" class="mt-1">Activation</h3>
                            </div>
                            <div class="col-md-6">
                       
                            <div class="input-group mt-4"> 
                            <div class="input-group-prepend"></div>
                          
                            <input placeholder="Paste Your Txn hase code" type="number" id="amount" value="11" class="form-control" readonly></div>
                            </div>
                            <div class="col-md-3 text-center mt-4">

                                {% if request.user.totalWalletBalance >= 11 %}
                                <button class="btn-wide btn btn-success btngenrate " id="ActivateId" onclick="ActivateUserId()">Activate Id</button>
                                {% else %}
                                <button class="btn-wide btn btn-primary btngenrate"  disabled>Activate Id</button></br>
                                <span class="text-danger mt-4"style="font-size:12px;">Insufficient wallet Balance</span>
                                {% endif %}
                            </div>
                            
                            
                        </div>
                </div>
                
            </div>
        </div>
        
    </div>
 
  
    <div class="col-lg-12">
        <div class="card transaction-table">
            <div class="card-header border-0 flex-wrap pb-0">
                <div class="mb-2">
                    <h4 class="card-title">Recent Transactions</h4>
                    <p class="mb-sm-3 mb-0">All active Packages</p>
                </div>
               
            </div>

           
            <div class="card-body p-0">
                <div class="tab-content" id="myTabContent1">
                    <div class="tab-pane fade show active" id="Week" role="tabpanel" aria-labelledby="Week-tab">
                        <div class="table-responsive">
                            <table class="table table-responsive-md">
                                <thead>
                                    <tr>
                                        <th>
                                            #
                                        </th>
                                        <th>Package($)</th>
                                        
                                        <th>Activated by</th>
                                        <th>Activation Date</th>
                                        <th class="text-end">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                  
                                    {% with allInvs=request.user.investmentwallet_member.all %}
                                    {% if allInvs.count > 0 %}
                                    {% for inv in  allInvs %}


                                    <tr>
                                        <td>
                                            <svg class="arrow svg-main-icon" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                    <polygon points="0 0 24 0 24 24 0 24"/>
                                                    <rect fill="#fff" opacity="0.3" transform="translate(11.646447, 12.853553) rotate(-315.000000) translate(-11.646447, -12.853553) " x="10.6464466" y="5.85355339" width="2" height="14" rx="1"/>
                                                    <path d="M8.1109127,8.90380592 C7.55862795,8.90380592 7.1109127,8.45609067 7.1109127,7.90380592 C7.1109127,7.35152117 7.55862795,6.90380592 8.1109127,6.90380592 L16.5961941,6.90380592 C17.1315855,6.90380592 17.5719943,7.32548256 17.5952502,7.8603687 L17.9488036,15.9920967 C17.9727933,16.5438602 17.5449482,17.0106003 16.9931847,17.0345901 C16.4414212,17.0585798 15.974681,16.6307346 15.9506913,16.0789711 L15.6387276,8.90380592 L8.1109127,8.90380592 Z" fill="#fff" fill-rule="nonzero"/>
                                                </g>
                                            </svg>
                                        </td>
                                       
                                        
                                        <td>{{inv.amount}}</td>

                                        {% if inv.activated_by == request.user %}
                                        <td>self</td>
                                        {% else %}
                                        <td>{{inv.activated_by}}</td>
                                        {% endif %}

                                     
                                        <td> {{inv.txn_date}}</td>
                                      
                                        <td  class="text-end"><div class="badge badge-sm badge-success">Active</div></td>
                                    </tr>

                                    {% endfor %}
                                    {% endif %}
                                    {% endwith %}

                           

                                    


                                </tbody>
                            </table>
                        </div>
                    </div>



          

                </div>
            </div>

        </div>
    </div>

</div>



{% endblock  %}


{% block 'addFooterScripts' %}

<script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.6.1-rc.0/web3.min.js"></script>
{% comment %} <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script> {% endcomment %}

{% comment %} 
<script>
    let account;
    let web3;

    async function connectMetaMask() {
        if (typeof window.ethereum !== 'undefined') {
            try {
                const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
                account = accounts[0];
                document.getElementById('account').innerText = 'Connected Account: ' + account;

                web3 = new Web3(window.ethereum);
                const chainId = await web3.eth.getChainId();
                let networkName;
                let nativeCurrency;

                switch (chainId) {
                    case 1:
                        networkName = 'Ethereum Mainnet';
                        nativeCurrency = 'ETH';
                        break;
                    case 3:
                        networkName = 'Ropsten Testnet';
                        nativeCurrency = 'ETH';
                        break;
                    case 4:
                        networkName = 'Rinkeby Testnet';
                        nativeCurrency = 'ETH';
                        break;
                    case 5:
                        networkName = 'Goerli Testnet';
                        nativeCurrency = 'ETH';
                        break;
                    case 42:
                        networkName = 'Kovan Testnet';
                        nativeCurrency = 'ETH';
                        break;
                    case 56:
                        networkName = 'Binance Smart Chain Mainnet';
                        nativeCurrency = 'BNB';
                        break;
                    case 97:
                        networkName = 'Binance Smart Chain Testnet';
                        nativeCurrency = 'tBNB';
                        break;
                    // Add other networks here as needed
                    default:
                        networkName = 'Unknown Network';
                        nativeCurrency = 'Unknown';
                }

                document.getElementById('network').innerText = 'Connected Network: ' + networkName;

                const balance = await web3.eth.getBalance(account);
                const balanceInNativeCurrency = web3.utils.fromWei(balance, 'ether');
                document.getElementById('balance').innerText = 'Balance: ' + balanceInNativeCurrency + ' ' + nativeCurrency;

            } catch (error) {
                console.error('User denied account access or error occurred', error);
            }
        } else {
            alert('MetaMask is not installed. Please install it to use this feature.');
        }
    }

    async function sendTransaction() {
        if (typeof window.ethereum !== 'undefined' && account) {
            try {
                const recipient = '0xRecipientAddressHere';  // Replace with the recipient's address
                const amount = web3.utils.toWei('0.1', 'ether');  // Replace with the amount to send

                await web3.eth.sendTransaction({
                    from: account,
                    to: recipient,
                    value: amount
                })
                .on('transactionHash', (hash) => {
                    console.log('Transaction Hash:', hash);
                })
                .on('receipt', (receipt) => {
                    console.log('Receipt:', receipt);
                })
                .on('error', (error) => {
                    console.error('Transaction failed:', error);
                });

            } catch (error) {
                console.error('Error sending transaction:', error);
            }
        } else {
            alert('MetaMask is not connected. Please connect it first.');
        }
    }

    document.getElementById('connectButton').onclick = connectMetaMask;
    document.getElementById('sendButton').onclick = sendTransaction;
</script> 

{% endcomment %}


{% comment %} <script>

    let web3;
    let account;

    async function connectMetaMask() {
        if (typeof window.ethereum !== 'undefined') {
            web3 = new Web3(window.ethereum);
            await window.ethereum.request({ method: 'eth_requestAccounts' });
            const accounts = await web3.eth.getAccounts();
            account = accounts[0];
        
       

            const chainId = await web3.eth.getChainId();
            let networkName;
            let nativeCurrency;

            switch (chainId) {
                case 1:
                    networkName = 'Ethereum Mainnet';
                    nativeCurrency = 'ETH';
                    break;
                case 56:
                    networkName = 'Binance Smart Chain Mainnet';
                    nativeCurrency = 'BNB';
                    break;
                case 97:
                    networkName = 'Binance Smart Chain Testnet';
                    nativeCurrency = 'tBNB';
                    break;
                default:
                    networkName = 'Unknown Network';
                    nativeCurrency = 'Unknown';
            }

            //document.getElementById('network').innerText = 'Connected Network: ' + networkName;

            if (chainId == 97) { // Check if the connected network is BSC Testnet

                var totalBal=await getBalance(account);
                if(totalBal){

                    document.getElementById('cnbtn').innerHTML = `<button type="button" class="btn btn-success"><i class="fas fa-wallet"></i>${totalBal}tBNB</button> `;
                }


            } 
            if (chainId !== 97) {
                try {
                    await window.ethereum.request({
                        method: 'wallet_switchEthereumChain',
                        params: [{ chainId: '0x61' }], // Chain ID 97 in hexadecimal (0x61)
                    });
                } catch (switchError) {
                    if (switchError.code === 4902) {
                        try {
                            await window.ethereum.request({
                                method: 'wallet_addEthereumChain',
                                params: [
                                    {
                                        chainId: '0x61',
                                        chainName: 'BSC Testnet',
                                        rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],
                                        nativeCurrency: {
                                            name: 'tBNB',
                                            symbol: 'tBNB',
                                            decimals: 18,
                                        },
                                        blockExplorerUrls: ['https://testnet.bscscan.com'],
                                    },
                                ],
                            });
                        } catch (addError) {
                            console.error(addError);
                        }
                    }
                }
            }

        } else {
            alert('MetaMask is not installed. Please install MetaMask to proceed.');
        }
    }
    async function getBalance(account) {
        try {
            const balance = await web3.eth.getBalance(account);
            const balanceInBNB = web3.utils.fromWei(balance, 'ether');

            return balanceInBNB
           // document.getElementById('balance').innerText = 'Balance: ' + balanceInBNB + ' tBNB';
        } catch (error) {
            console.error('Error getting balance:', error);
            return false
        }
    }
    async function payWithMetaMask() {

        //console.log("came here");
        bt = $(`#pay-button`);
        bt.attr("disabled", "").html("<i class='fa fa-spin fa-spinner'></i>&nbsp;&nbsp;Please wait...");

        var amnt=document.getElementById('amount').value;
        const response = await fetch(`/member/get-busd-price/`);
        const data = await response.json();
        const priceInUsd = data.price;
        console.log(priceInUsd);
        const cryptoAmount = (amnt / priceInUsd).toFixed(18); // Calculate crypto amount for $55

        console.log(cryptoAmount);
        if (!account) {
            alert('Please connect to MetaMask first.');
            location.reload();
            return;
        }

        web3.eth.sendTransaction({
            from: account,
            to: '0xe749438B8CEBC367869ADAAf7D1B108d3c77A856', // Replace with your testnet receiving address
            //value: web3.utils.toWei('1', 'ether') // Amount in tBNB
            value: web3.utils.toWei(cryptoAmount, 'ether') // Amount in tBNB
        })
        .on('transactionHash', function(hash) {
            console.log('Transaction Hash:', hash);
            sendTransactionHashToDjango(hash,priceInUsd,'tBNB',cryptoAmount);
            //location.reload();
        }).on('error', console.error);
        /*.on('confirmation', function(hash,confirmationNumber, receipt) {
            console.log(hash);
            console.log('Confirmation Number:', confirmationNumber);
            console.log('Receipt:', receipt);
        })*/
        
    }
{% endcomment %}

<script>

    function ActivateUserId() {

       // console.log("came here");

       const totalWalletBalance = parseFloat(`{{ request.user.totalWalletBalance }}`);

        bt = $(`#ActivateId`);
        bt.attr("disabled", "").html("<i class='fa fa-spin fa-spinner'></i>&nbsp;&nbsp;Please wait...");

        const amount = parseFloat($('#amount').val());

        if (isNaN(amount) || !(amount <= totalWalletBalance)) {
            alert("Insufficient Wallet Balance");
            location.reload();
            return;  // Exit the function early
        }



        fetch('/member/activate-id/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': `{{csrf_token}}`
            },
            body: JSON.stringify({Package:amount })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.msg);
                location.reload(); // Reload the page
            } else {
                alert(data.msg);
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
    function sendTransactionHashToDjango(transactionHash,tranTimeCoinValue,coinName,cryptoAmount) {
        fetch('/member/verify-transaction/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                //'X-CSRFToken': getCookie('csrftoken')
                'X-CSRFToken': `{{csrf_token}}`
            },
            body: JSON.stringify({ transactionHash: transactionHash,tranTimeCoinValue:tranTimeCoinValue,coinName:coinName,cryptoAmount:cryptoAmount })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Transaction verified and funds added to your wallet.');
                location.reload(); // Reload the page
            } else {
                alert('Transaction verification failed.');
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    {% comment %} function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    } {% endcomment %}


    document.getElementById('connect-button').addEventListener('click', connectMetaMask);
    document.getElementById('pay-button').addEventListener('click', payWithMetaMask);

</script> 
	 


{% endblock %}


















